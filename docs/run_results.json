{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.3", "generated_at": "2024-07-17T23:35:22.602722Z", "invocation_id": "c51a55b4-7e5c-4f78-84b7-b7b478dc41eb", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.778167Z", "completed_at": "2024-07-17T23:35:20.813758Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.824852Z", "completed_at": "2024-07-17T23:35:20.824861Z"}], "thread_id": "Thread-1", "execution_time": 0.05055689811706543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_app_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_crashes_app_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.804853Z", "completed_at": "2024-07-17T23:35:20.822047Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.825748Z", "completed_at": "2024-07-17T23:35:20.825756Z"}], "thread_id": "Thread-2", "execution_time": 0.05060386657714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_os_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_crashes_os_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.808395Z", "completed_at": "2024-07-17T23:35:20.825454Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.827603Z", "completed_at": "2024-07-17T23:35:20.827607Z"}], "thread_id": "Thread-3", "execution_time": 0.051115989685058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_overview_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_crashes_overview\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.811139Z", "completed_at": "2024-07-17T23:35:20.826237Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.828529Z", "completed_at": "2024-07-17T23:35:20.828535Z"}], "thread_id": "Thread-4", "execution_time": 0.05149221420288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_app_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_app_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.813975Z", "completed_at": "2024-07-17T23:35:20.826468Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.828903Z", "completed_at": "2024-07-17T23:35:20.828906Z"}], "thread_id": "Thread-5", "execution_time": 0.05127286911010742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_country_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_country\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.816493Z", "completed_at": "2024-07-17T23:35:20.826777Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.829263Z", "completed_at": "2024-07-17T23:35:20.829266Z"}], "thread_id": "Thread-6", "execution_time": 0.03864002227783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_device_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_device\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.818913Z", "completed_at": "2024-07-17T23:35:20.827307Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.829848Z", "completed_at": "2024-07-17T23:35:20.829852Z"}], "thread_id": "Thread-7", "execution_time": 0.02625584602355957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_os_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_os_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.822321Z", "completed_at": "2024-07-17T23:35:20.828056Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.830680Z", "completed_at": "2024-07-17T23:35:20.830686Z"}], "thread_id": "Thread-8", "execution_time": 0.026398181915283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_overview_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_installs_overview\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.834099Z", "completed_at": "2024-07-17T23:35:20.843669Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.855955Z", "completed_at": "2024-07-17T23:35:20.855961Z"}], "thread_id": "Thread-1", "execution_time": 0.026423215866088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_app_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_app_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.837528Z", "completed_at": "2024-07-17T23:35:20.849429Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.856706Z", "completed_at": "2024-07-17T23:35:20.856710Z"}], "thread_id": "Thread-2", "execution_time": 0.025606155395507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_country_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_country\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.854560Z", "completed_at": "2024-07-17T23:35:20.855743Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.857923Z", "completed_at": "2024-07-17T23:35:20.857927Z"}], "thread_id": "Thread-8", "execution_time": 0.02066802978515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.earnings", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.840902Z", "completed_at": "2024-07-17T23:35:20.856468Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.858524Z", "completed_at": "2024-07-17T23:35:20.858528Z"}], "thread_id": "Thread-3", "execution_time": 0.02582383155822754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_device_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_device\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.847043Z", "completed_at": "2024-07-17T23:35:20.857225Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.859348Z", "completed_at": "2024-07-17T23:35:20.859351Z"}], "thread_id": "Thread-5", "execution_time": 0.025732040405273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_overview_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_overview\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.843877Z", "completed_at": "2024-07-17T23:35:20.857435Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.859713Z", "completed_at": "2024-07-17T23:35:20.859716Z"}], "thread_id": "Thread-4", "execution_time": 0.026315927505493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_os_version_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_ratings_os_version\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.849649Z", "completed_at": "2024-07-17T23:35:20.857717Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.860045Z", "completed_at": "2024-07-17T23:35:20.860048Z"}], "thread_id": "Thread-6", "execution_time": 0.026206254959106445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_country_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_store_performance_country\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.852070Z", "completed_at": "2024-07-17T23:35:20.858850Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.861115Z", "completed_at": "2024-07-17T23:35:20.861118Z"}], "thread_id": "Thread-7", "execution_time": 0.024315834045410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_source_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"zz_google_play\".\"stats_store_performance_traffic_source\"", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.864348Z", "completed_at": "2024-07-17T23:35:20.866133Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.869936Z", "completed_at": "2024-07-17T23:35:20.869940Z"}], "thread_id": "Thread-1", "execution_time": 0.009370803833007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.financial_stats_subscriptions_country", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.866763Z", "completed_at": "2024-07-17T23:35:20.867904Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.871760Z", "completed_at": "2024-07-17T23:35:20.871764Z"}], "thread_id": "Thread-2", "execution_time": 0.010353803634643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_crashes_app_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.868648Z", "completed_at": "2024-07-17T23:35:20.869738Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.876592Z", "completed_at": "2024-07-17T23:35:20.876596Z"}], "thread_id": "Thread-8", "execution_time": 0.014213085174560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_crashes_os_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.870278Z", "completed_at": "2024-07-17T23:35:20.871376Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.877150Z", "completed_at": "2024-07-17T23:35:20.877154Z"}], "thread_id": "Thread-3", "execution_time": 0.014333963394165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_crashes_overview", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.872083Z", "completed_at": "2024-07-17T23:35:20.873175Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.878994Z", "completed_at": "2024-07-17T23:35:20.878997Z"}], "thread_id": "Thread-5", "execution_time": 0.015522003173828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_installs_app_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.873378Z", "completed_at": "2024-07-17T23:35:20.874452Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.879338Z", "completed_at": "2024-07-17T23:35:20.879341Z"}], "thread_id": "Thread-4", "execution_time": 0.015649080276489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_installs_country", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.874672Z", "completed_at": "2024-07-17T23:35:20.876393Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.879652Z", "completed_at": "2024-07-17T23:35:20.879655Z"}], "thread_id": "Thread-6", "execution_time": 0.015749216079711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_installs_device", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.877492Z", "completed_at": "2024-07-17T23:35:20.878588Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.880607Z", "completed_at": "2024-07-17T23:35:20.880610Z"}], "thread_id": "Thread-7", "execution_time": 0.014117002487182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_installs_os_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.883605Z", "completed_at": "2024-07-17T23:35:20.884724Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.888437Z", "completed_at": "2024-07-17T23:35:20.888441Z"}], "thread_id": "Thread-1", "execution_time": 0.008325815200805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_installs_overview", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.885332Z", "completed_at": "2024-07-17T23:35:20.886428Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.890232Z", "completed_at": "2024-07-17T23:35:20.890235Z"}], "thread_id": "Thread-2", "execution_time": 0.009340763092041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_ratings_app_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.887162Z", "completed_at": "2024-07-17T23:35:20.888247Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.895082Z", "completed_at": "2024-07-17T23:35:20.895086Z"}], "thread_id": "Thread-8", "execution_time": 0.013324737548828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_ratings_country", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.888766Z", "completed_at": "2024-07-17T23:35:20.889852Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.895631Z", "completed_at": "2024-07-17T23:35:20.895634Z"}], "thread_id": "Thread-3", "execution_time": 0.013461112976074219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_ratings_device", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.890558Z", "completed_at": "2024-07-17T23:35:20.892319Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.897472Z", "completed_at": "2024-07-17T23:35:20.897475Z"}], "thread_id": "Thread-5", "execution_time": 0.014700651168823242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_ratings_os_version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.892515Z", "completed_at": "2024-07-17T23:35:20.893622Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.897809Z", "completed_at": "2024-07-17T23:35:20.897812Z"}], "thread_id": "Thread-4", "execution_time": 0.014827966690063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_ratings_overview", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.893813Z", "completed_at": "2024-07-17T23:35:20.894889Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.898128Z", "completed_at": "2024-07-17T23:35:20.898131Z"}], "thread_id": "Thread-6", "execution_time": 0.01494598388671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_store_performance_country", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.895974Z", "completed_at": "2024-07-17T23:35:20.897061Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.899091Z", "completed_at": "2024-07-17T23:35:20.899094Z"}], "thread_id": "Thread-7", "execution_time": 0.014023780822753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_integration_tests.stats_store_performance_traffic_source", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.902245Z", "completed_at": "2024-07-17T23:35:20.903458Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:20.920539Z", "completed_at": "2024-07-17T23:35:20.920545Z"}], "thread_id": "Thread-1", "execution_time": 0.021964073181152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.google_play_source.google_play__country_codes", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.920914Z", "completed_at": "2024-07-17T23:35:21.560258Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.560580Z", "completed_at": "2024-07-17T23:35:21.560588Z"}], "thread_id": "Thread-3", "execution_time": 0.7263720035552979, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_overview", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    daily_anrs\n    \n as \n    \n    daily_anrs\n    \n, \n    \n    \n    daily_crashes\n    \n as \n    \n    daily_crashes\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast(daily_anrs as bigint) as anrs,\n        cast(daily_crashes as bigint) as crashes,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.930846Z", "completed_at": "2024-07-17T23:35:21.584607Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.584885Z", "completed_at": "2024-07-17T23:35:21.584890Z"}], "thread_id": "Thread-4", "execution_time": 0.756389856338501, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_country", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as TEXT) as country,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.971007Z", "completed_at": "2024-07-17T23:35:21.632861Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.657592Z", "completed_at": "2024-07-17T23:35:21.657599Z"}], "thread_id": "Thread-7", "execution_time": 0.8205609321594238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_os_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    android_os_version\n    \n as \n    \n    android_os_version\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast(android_os_version as TEXT) as android_os_version,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.904083Z", "completed_at": "2024-07-17T23:35:21.658812Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.660420Z", "completed_at": "2024-07-17T23:35:21.660423Z"}], "thread_id": "Thread-2", "execution_time": 0.8327951431274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_app_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    app_version_code\n    \n as \n    \n    app_version_code\n    \n, \n    \n    \n    daily_anrs\n    \n as \n    \n    daily_anrs\n    \n, \n    \n    \n    daily_crashes\n    \n as \n    \n    daily_crashes\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as integer) as app_version_code,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(daily_anrs as bigint)) as anrs,\n        sum(cast(daily_crashes as bigint)) as crashes\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.916094Z", "completed_at": "2024-07-17T23:35:21.659264Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.660644Z", "completed_at": "2024-07-17T23:35:21.660648Z"}], "thread_id": "Thread-8", "execution_time": 0.8341560363769531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_crashes_os_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    android_os_version\n    \n as \n    \n    android_os_version\n    \n, \n    \n    \n    daily_anrs\n    \n as \n    \n    daily_anrs\n    \n, \n    \n    \n    daily_crashes\n    \n as \n    \n    daily_crashes\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(android_os_version as TEXT) as android_os_version,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(daily_anrs as bigint)) as anrs,\n        sum(cast(daily_crashes as bigint)) as crashes\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.925645Z", "completed_at": "2024-07-17T23:35:21.659485Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.660866Z", "completed_at": "2024-07-17T23:35:21.660869Z"}], "thread_id": "Thread-5", "execution_time": 0.8334870338439941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_app_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    app_version_code\n    \n as \n    \n    app_version_code\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as integer) as app_version_code,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.979261Z", "completed_at": "2024-07-17T23:35:21.659968Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.661294Z", "completed_at": "2024-07-17T23:35:21.661296Z"}], "thread_id": "Thread-1", "execution_time": 0.7583069801330566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_overview", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast(active_device_installs as bigint) as active_devices_last_30_days,\n        cast(daily_device_installs as bigint) as device_installs,\n        cast(daily_device_uninstalls as bigint) as device_uninstalls,\n        cast(daily_device_upgrades as bigint) as device_upgrades,\n        cast(daily_user_installs as bigint) as user_installs,\n        cast(daily_user_uninstalls as bigint) as user_uninstalls,\n        cast(install_events as bigint) as install_events,\n        cast(uninstall_events as bigint) as uninstall_events,\n        cast(update_events as bigint) as update_events,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:20.935776Z", "completed_at": "2024-07-17T23:35:21.654881Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.659044Z", "completed_at": "2024-07-17T23:35:21.659047Z"}], "thread_id": "Thread-6", "execution_time": 0.8342170715332031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_installs_device", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    active_device_installs\n    \n as \n    \n    active_device_installs\n    \n, \n    \n    \n    current_device_installs\n    \n as \n    \n    current_device_installs\n    \n, \n    \n    \n    current_user_installs\n    \n as \n    \n    current_user_installs\n    \n, \n    \n    \n    daily_device_installs\n    \n as \n    \n    daily_device_installs\n    \n, \n    \n    \n    daily_device_uninstalls\n    \n as \n    \n    daily_device_uninstalls\n    \n, \n    \n    \n    daily_device_upgrades\n    \n as \n    \n    daily_device_upgrades\n    \n, \n    \n    \n    daily_user_installs\n    \n as \n    \n    daily_user_installs\n    \n, \n    \n    \n    daily_user_uninstalls\n    \n as \n    \n    daily_user_uninstalls\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    device\n    \n as \n    \n    device\n    \n, \n    \n    \n    install_events\n    \n as \n    \n    install_events\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_user_installs\n    \n as \n    \n    total_user_installs\n    \n, \n    \n    \n    uninstall_events\n    \n as \n    \n    uninstall_events\n    \n, \n    \n    \n    update_events\n    \n as \n    \n    update_events\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(device as TEXT) as device, -- device_type\n        cast(package_name as TEXT) as package_name,\n        sum(cast(active_device_installs as bigint)) as active_devices_last_30_days,\n        sum(cast(daily_device_installs as bigint)) as device_installs,\n        sum(cast(daily_device_uninstalls as bigint)) as device_uninstalls,\n        sum(cast(daily_device_upgrades as bigint)) as device_upgrades,\n        sum(cast(daily_user_installs as bigint)) as user_installs,\n        sum(cast(daily_user_uninstalls as bigint)) as user_uninstalls,\n        sum(cast(install_events as bigint)) as install_events,\n        sum(cast(uninstall_events as bigint)) as uninstall_events,\n        sum(cast(update_events as bigint)) as update_events\n    from fields\n    group by 1,2,3,4\n\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.759492Z", "completed_at": "2024-07-17T23:35:21.770139Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.770373Z", "completed_at": "2024-07-17T23:35:21.770383Z"}], "thread_id": "Thread-6", "execution_time": 0.02674412727355957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_overview_source_relation__package_name__date_day.15c14bf5fb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.771541Z", "completed_at": "2024-07-17T23:35:21.775447Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.775669Z", "completed_at": "2024-07-17T23:35:21.775674Z"}], "thread_id": "Thread-6", "execution_time": 0.0046999454498291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_country_source_relation__package_name__date_day__country.78328bbca0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country\"\n    group by source_relation, package_name, date_day, country\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.776677Z", "completed_at": "2024-07-17T23:35:21.779939Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.780162Z", "completed_at": "2024-07-17T23:35:21.780166Z"}], "thread_id": "Thread-6", "execution_time": 0.003963947296142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_os_version_source_relation__package_name__date_day__android_os_version.b30d0583ac", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.781173Z", "completed_at": "2024-07-17T23:35:21.784275Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.784492Z", "completed_at": "2024-07-17T23:35:21.784495Z"}], "thread_id": "Thread-6", "execution_time": 0.0037899017333984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_app_version_source_relation__package_name__date_day__app_version_code.16488408eb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.785502Z", "completed_at": "2024-07-17T23:35:21.788313Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.788533Z", "completed_at": "2024-07-17T23:35:21.788537Z"}], "thread_id": "Thread-6", "execution_time": 0.003503084182739258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_crashes_os_version_source_relation__package_name__date_day__android_os_version.a6241d4e33", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.789541Z", "completed_at": "2024-07-17T23:35:21.792412Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.792628Z", "completed_at": "2024-07-17T23:35:21.792632Z"}], "thread_id": "Thread-6", "execution_time": 0.0035619735717773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_app_version_source_relation__package_name__date_day__app_version_code.827301f79d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.793632Z", "completed_at": "2024-07-17T23:35:21.796968Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.797197Z", "completed_at": "2024-07-17T23:35:21.797201Z"}], "thread_id": "Thread-6", "execution_time": 0.004038333892822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_overview_source_relation__package_name__date_day.5fe2d4c377", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.798242Z", "completed_at": "2024-07-17T23:35:21.801341Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:21.801558Z", "completed_at": "2024-07-17T23:35:21.801562Z"}], "thread_id": "Thread-6", "execution_time": 0.0037899017333984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_installs_device_source_relation__package_name__date_day__device.e59a1803ff", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, device\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device\"\n    group by source_relation, package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.666810Z", "completed_at": "2024-07-17T23:35:22.244220Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.244691Z", "completed_at": "2024-07-17T23:35:22.244702Z"}], "thread_id": "Thread-4", "execution_time": 0.6324429512023926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_country", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country as TEXT) as country,\n        cast(package_name as TEXT) as package_name,\n        case when country is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when country is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.304377Z", "completed_at": "2024-07-17T23:35:22.310099Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.310409Z", "completed_at": "2024-07-17T23:35:22.310413Z"}], "thread_id": "Thread-6", "execution_time": 0.006925821304321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_country_source_relation__package_name__date_day__country.5c4427c5b6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country\"\n    group by source_relation, package_name, date_day, country\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.726228Z", "completed_at": "2024-07-17T23:35:22.308772Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.309098Z", "completed_at": "2024-07-17T23:35:22.309104Z"}], "thread_id": "Thread-7", "execution_time": 0.6435890197753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_device", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    device\n    \n as \n    \n    device\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(device as TEXT) as device,\n        cast(package_name as TEXT) as package_name,\n        case when device is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when device is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.661492Z", "completed_at": "2024-07-17T23:35:22.309404Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.309777Z", "completed_at": "2024-07-17T23:35:22.309782Z"}], "thread_id": "Thread-3", "execution_time": 0.7231571674346924, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_app_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    app_version_code\n    \n as \n    \n    app_version_code\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(app_version_code as integer) as app_version_code,\n        cast(package_name as TEXT) as package_name,\n        case when app_version_code is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when app_version_code is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.377228Z", "completed_at": "2024-07-17T23:35:22.382219Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.382802Z", "completed_at": "2024-07-17T23:35:22.382806Z"}], "thread_id": "Thread-6", "execution_time": 0.012126922607421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_device_source_relation__package_name__date_day__device.856ffd1245", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, device\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device\"\n    group by source_relation, package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.371712Z", "completed_at": "2024-07-17T23:35:22.382540Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.383552Z", "completed_at": "2024-07-17T23:35:22.383556Z"}], "thread_id": "Thread-4", "execution_time": 0.013233184814453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__device_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_device\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_device\"\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\ndevice_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day) as date_day,\n        coalesce(install_metrics.device, ratings.device) as device, -- device type\n        coalesce(install_metrics.package_name, ratings.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null device types otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.device, 'null_device') = coalesce(ratings.device, 'null_device') -- in the source package we aggregate all null device-type records together into one batch per day\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, device, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, device, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, device, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from device_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        device,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, device, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        device,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__device_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.386016Z", "completed_at": "2024-07-17T23:35:22.399037Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.399289Z", "completed_at": "2024-07-17T23:35:22.399295Z"}], "thread_id": "Thread-7", "execution_time": 0.0150909423828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__app_version_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_app_version\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version\"\n), \n\ncrashes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_app_version\"\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\napp_version_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.app_version_code, ratings.app_version_code, crashes.app_version_code) as app_version_code,\n        coalesce(install_metrics.package_name, ratings.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple events in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- choosing an arbitrary negative integer as we can't coalesce with a string like 'null_version_code'. null app version codes will cause fanout\n        and coalesce(install_metrics.app_version_code, -5) = coalesce(ratings.app_version_code, -5) -- this really doesn't happen IRL but let's be safe\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name) = crashes.package_name\n        and coalesce(install_metrics.app_version_code, ratings.app_version_code, -5) = coalesce(crashes.app_version_code, -5)\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, app_version_code, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, app_version_code, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, app_version_code, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from app_version_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        app_version_code,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, app_version_code, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        app_version_code,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__app_version_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.391346Z", "completed_at": "2024-07-17T23:35:22.399773Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.400020Z", "completed_at": "2024-07-17T23:35:22.400023Z"}], "thread_id": "Thread-3", "execution_time": 0.015429973602294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_app_version_source_relation__package_name__date_day__app_version_code.bcbc07a5b6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_app_version\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.394969Z", "completed_at": "2024-07-17T23:35:22.401007Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.401485Z", "completed_at": "2024-07-17T23:35:22.401489Z"}], "thread_id": "Thread-6", "execution_time": 0.015815019607543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__device_report_source_relation__package_name__date_day__device.266c6d5429", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, device\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__device_report\"\n    group by source_relation, package_name, date_day, device\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.401896Z", "completed_at": "2024-07-17T23:35:22.405164Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.405607Z", "completed_at": "2024-07-17T23:35:22.405612Z"}], "thread_id": "Thread-4", "execution_time": 0.004904985427856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__app_version_report_source_relation__package_name__date_day__app_version_code.7abbf03304", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, app_version_code\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__app_version_report\"\n    group by source_relation, package_name, date_day, app_version_code\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.745028Z", "completed_at": "2024-07-17T23:35:22.363694Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.364035Z", "completed_at": "2024-07-17T23:35:22.364041Z"}], "thread_id": "Thread-8", "execution_time": 0.66792893409729, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_os_version", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    android_os_version\n    \n as \n    \n    android_os_version\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(android_os_version as TEXT) as android_os_version,\n        cast(package_name as TEXT) as package_name,\n        case when android_os_version is null then null else cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) end as average_rating,\n        case when android_os_version is null then null else total_average_rating end as rolling_total_average_rating\n    from fields\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.412528Z", "completed_at": "2024-07-17T23:35:22.415540Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.415961Z", "completed_at": "2024-07-17T23:35:22.415966Z"}], "thread_id": "Thread-7", "execution_time": 0.008746147155761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_os_version_source_relation__package_name__date_day__android_os_version.e42db18deb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.407925Z", "completed_at": "2024-07-17T23:35:22.415761Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.416537Z", "completed_at": "2024-07-17T23:35:22.416540Z"}], "thread_id": "Thread-3", "execution_time": 0.009554862976074219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__os_version_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_os_version\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_os_version\"\n), \n\ncrashes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_os_version\"\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\napp_version_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.android_os_version, ratings.android_os_version, crashes.android_os_version) as android_os_version,\n        coalesce(install_metrics.package_name, ratings.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        \n        -- metrics based on events. a user or device can have multiple events in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null os versions otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.android_os_version, 'null_os_version') = coalesce(ratings.android_os_version, 'null_os_version') -- in the source package we aggregate all null device-type records together into one batch per day\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name) = crashes.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.android_os_version, ratings.android_os_version, 'null_os_version') = coalesce(crashes.android_os_version, 'null_os_version') -- in the source package we aggregate all null device-type records together into one batch per day\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, android_os_version, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, android_os_version, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, android_os_version, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition\n    from app_version_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        android_os_version,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, android_os_version, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        android_os_version,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating,\n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n\n        -- calculate difference rolling metric\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__os_version_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.441546Z", "completed_at": "2024-07-17T23:35:22.444862Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.445083Z", "completed_at": "2024-07-17T23:35:22.445086Z"}], "thread_id": "Thread-4", "execution_time": 0.0048220157623291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__os_version_report_source_relation__package_name__date_day__android_os_version.8520366a30", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, android_os_version\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__os_version_report\"\n    group by source_relation, package_name, date_day, android_os_version\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.749789Z", "completed_at": "2024-07-17T23:35:22.440072Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.440659Z", "completed_at": "2024-07-17T23:35:22.440665Z"}], "thread_id": "Thread-5", "execution_time": 0.7505509853363037, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_country", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    country_region\n    \n as \n    \n    country_region\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    store_listing_acquisitions\n    \n as \n    \n    store_listing_acquisitions\n    \n, \n    \n    \n    store_listing_conversion_rate\n    \n as \n    \n    store_listing_conversion_rate\n    \n, \n    \n    \n    store_listing_visitors\n    \n as \n    \n    store_listing_visitors\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(country_region as TEXT) as country_region,\n        cast(package_name as TEXT) as package_name,\n        sum(cast(store_listing_acquisitions as bigint)) as store_listing_acquisitions,\n        avg(store_listing_conversion_rate) as store_listing_conversion_rate,\n        sum(cast(store_listing_visitors as bigint)) as store_listing_visitors\n    from fields\n    group by 1,2,3,4\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.491534Z", "completed_at": "2024-07-17T23:35:22.506022Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.506658Z", "completed_at": "2024-07-17T23:35:22.506662Z"}], "thread_id": "Thread-6", "execution_time": 0.01666116714477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__country_report", "compiled": true, "compiled_code": "with installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_country\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_country\"\n), \n\nstore_performance as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n), \n\ncountry_codes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_source\".\"google_play__country_codes\"\n),\n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\nstore_performance_metrics as (\n\n    select\n        *,\n        sum(store_listing_acquisitions) over (partition by source_relation, country_region, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by source_relation, country_region, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance\n), \n\ncountry_join as (\n\n    select \n        -- these 4 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, store_performance_metrics.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, store_performance_metrics.date_day) as date_day,\n        coalesce(install_metrics.country, ratings.country, store_performance_metrics.country_region) as country,\n        coalesce(install_metrics.package_name, ratings.package_name, store_performance_metrics.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        coalesce(store_performance_metrics.store_listing_acquisitions, 0) as store_listing_acquisitions,\n        coalesce(store_performance_metrics.store_listing_visitors, 0) as store_listing_visitors,\n        store_performance_metrics.store_listing_conversion_rate, -- not coalescing if there aren't any visitors \n        \n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except %'s') are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating\n        ratings.rolling_total_average_rating,\n        store_performance_metrics.total_store_acquisitions,\n        store_performance_metrics.total_store_visitors\n        \n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n        -- coalesce null countries otherwise they'll cause fanout with the full outer join\n        and coalesce(install_metrics.country, 'null_country') = coalesce(ratings.country, 'null_country') -- in the source package we aggregate all null country records together into one batch per day\n    full outer join store_performance_metrics\n        on store_performance_metrics.date_day = coalesce(install_metrics.date_day, ratings.date_day)\n        and store_performance_metrics.source_relation = coalesce(install_metrics.source_relation, ratings.source_relation)\n        and store_performance_metrics.package_name = coalesce(install_metrics.package_name, ratings.package_name)\n        and coalesce(store_performance_metrics.country_region, 'null_country') = coalesce(install_metrics.country, ratings.country, 'null_country')\n), \n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition, sum(case when total_store_acquisitions is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_store_acquisitions_partition, sum(case when total_store_visitors is null \n                then 0 else 1 end) over (partition by source_relation, country, package_name order by date_day asc rows unbounded preceding) as total_store_visitors_partition\n    from country_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        country,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions, \n        store_listing_visitors,\n        store_listing_conversion_rate,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls, first_value( total_store_acquisitions ) over (\n            partition by source_relation, total_store_acquisitions_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions, first_value( total_store_visitors ) over (\n            partition by source_relation, total_store_visitors_partition, country, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        country as country_short,\n        coalesce(country_codes.alternative_country_name, country_codes.country_name) as country_long,\n        country_codes.region,\n        country_codes.sub_region,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating, \n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n        coalesce(total_store_acquisitions, 0) as total_store_acquisitions,\n        coalesce(total_store_visitors, 0) as total_store_visitors,\n\n        -- calculate percentage and difference rolling metrics\n        round(cast(total_store_acquisitions as numeric(28,6)) / nullif(total_store_visitors, 0), 4) as rolling_store_conversion_rate,\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n    left join country_codes\n        on country_codes.country_code_alpha_2 = fill_values.country\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__country_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.739019Z", "completed_at": "2024-07-17T23:35:22.441354Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.444477Z", "completed_at": "2024-07-17T23:35:22.444481Z"}], "thread_id": "Thread-2", "execution_time": 0.7713890075683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__stats_ratings_overview", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    daily_average_rating\n    \n as \n    \n    daily_average_rating\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    total_average_rating\n    \n as \n    \n    total_average_rating\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        cast( nullif(cast(daily_average_rating as TEXT), 'NA') as float ) as average_rating,\n        total_average_rating as rolling_total_average_rating,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:21.754753Z", "completed_at": "2024-07-17T23:35:22.441122Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.444252Z", "completed_at": "2024-07-17T23:35:22.444256Z"}], "thread_id": "Thread-1", "execution_time": 0.7688970565795898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play_source.stg_google_play__store_performance_source", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _file\n    \n as \n    \n    _file\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _line\n    \n as \n    \n    _line\n    \n, \n    \n    \n    _modified\n    \n as \n    \n    _modified\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    package_name\n    \n as \n    \n    package_name\n    \n, \n    \n    \n    search_term\n    \n as \n    \n    search_term\n    \n, \n    \n    \n    store_listing_acquisitions\n    \n as \n    \n    store_listing_acquisitions\n    \n, \n    \n    \n    store_listing_conversion_rate\n    \n as \n    \n    store_listing_conversion_rate\n    \n, \n    \n    \n    store_listing_visitors\n    \n as \n    \n    store_listing_visitors\n    \n, \n    \n    \n    traffic_source\n    \n as \n    \n    traffic_source\n    \n, \n    \n    \n    utm_campaign\n    \n as \n    \n    utm_campaign\n    \n, \n    \n    \n    utm_source\n    \n as \n    \n    utm_source\n    \n\n\n\n\n    \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(source_relation as TEXT) as source_relation,\n        cast(date as date) as date_day,\n        cast(package_name as TEXT) as package_name,\n        traffic_source,\n        search_term,\n        utm_campaign,\n        utm_source,\n        cast(store_listing_acquisitions as bigint) as store_listing_acquisitions,\n        store_listing_conversion_rate,\n        cast(store_listing_visitors as bigint) as store_listing_visitors,\n        -- make a surrogate key as the PK involves quite a few columns\n        md5(cast(coalesce(cast(date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(package_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(traffic_source as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(search_term as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(utm_campaign as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(utm_source as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as traffic_source_unique_key,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.501959Z", "completed_at": "2024-07-17T23:35:22.507392Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.508439Z", "completed_at": "2024-07-17T23:35:22.508442Z"}], "thread_id": "Thread-3", "execution_time": 0.01743316650390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_country_source_relation__package_name__date_day__country_region.b285211a0d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country_region\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n    group by source_relation, package_name, date_day, country_region\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.511132Z", "completed_at": "2024-07-17T23:35:22.594075Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.594346Z", "completed_at": "2024-07-17T23:35:22.594353Z"}], "thread_id": "Thread-4", "execution_time": 0.08510375022888184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__country_report_source_relation__package_name__date_day__country_short.1f14b27373", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day, country_short\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__country_report\"\n    group by source_relation, package_name, date_day, country_short\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.557378Z", "completed_at": "2024-07-17T23:35:22.594780Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.595476Z", "completed_at": "2024-07-17T23:35:22.595480Z"}], "thread_id": "Thread-2", "execution_time": 0.08503103256225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__store_performance_source_source_relation__traffic_source_unique_key.f8cb8573ae", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, traffic_source_unique_key\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_source\"\n    group by source_relation, traffic_source_unique_key\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.548027Z", "completed_at": "2024-07-17T23:35:22.595032Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.595873Z", "completed_at": "2024-07-17T23:35:22.595876Z"}], "thread_id": "Thread-8", "execution_time": 0.08608412742614746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play_source.dbt_utils_unique_combination_of_columns_stg_google_play__stats_ratings_overview_source_relation__package_name__date_day.d0ee2b4dd6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.551030Z", "completed_at": "2024-07-17T23:35:22.595259Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.596218Z", "completed_at": "2024-07-17T23:35:22.596221Z"}], "thread_id": "Thread-7", "execution_time": 0.0861959457397461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.google_play.google_play__overview_report", "compiled": true, "compiled_code": "with  __dbt__cte__int_google_play__store_performance as (\nwith store_performance as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__store_performance_country\"\n), \n\nstore_performance_rollup as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        sum(store_listing_acquisitions) as store_listing_acquisitions,\n        sum(store_listing_visitors) as store_listing_visitors\n    from store_performance\n    group by 1,2,3\n),\n\nstore_performance_metrics as (\n\n    select\n        *,\n        round(store_listing_acquisitions * 1.0 / nullif(store_listing_visitors, 0), 4) as store_listing_conversion_rate,\n        sum(store_listing_acquisitions) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions,\n        sum(store_listing_visitors) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from store_performance_rollup\n)\n\nselect *\nfrom store_performance_metrics\n), installs as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_installs_overview\"\n), \n\nratings as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_ratings_overview\"\n), \n\ncrashes as (\n\n    select *\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"stg_google_play__stats_crashes_overview\"\n), \n\nstore_performance as (\n\n    select *\n    from __dbt__cte__int_google_play__store_performance -- country rollup\n), \n\ninstall_metrics as (\n\n    select\n        *,\n        sum(device_installs) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs,\n        sum(device_uninstalls) over (partition by source_relation, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls\n    from installs \n), \n\noverview_join as (\n\n    select \n        -- these 3 columns are the grain of this model\n        coalesce(install_metrics.source_relation, ratings.source_relation, store_performance.source_relation, crashes.source_relation) as source_relation,\n        coalesce(install_metrics.date_day, ratings.date_day, store_performance.date_day, crashes.date_day) as date_day,\n        coalesce(install_metrics.package_name, ratings.package_name, store_performance.package_name, crashes.package_name) as package_name,\n\n        -- metrics based on unique devices + users\n        coalesce(install_metrics.active_devices_last_30_days, 0) as active_devices_last_30_days,\n        coalesce(install_metrics.device_installs, 0) as device_installs,\n        coalesce(install_metrics.device_uninstalls, 0) as device_uninstalls,\n        coalesce(install_metrics.device_upgrades, 0) as device_upgrades,\n        coalesce(install_metrics.user_installs, 0) as user_installs,\n        coalesce(install_metrics.user_uninstalls, 0) as user_uninstalls,\n        coalesce(store_performance.store_listing_acquisitions, 0) as store_listing_acquisitions,\n        coalesce(store_performance.store_listing_visitors, 0) as store_listing_visitors,\n        store_performance.store_listing_conversion_rate, -- not coalescing if there aren't any visitors \n\n        -- metrics based on events. a user or device can have multiple installs in one day\n        coalesce(crashes.crashes, 0) as crashes,\n        coalesce(crashes.anrs, 0) as anrs,\n        coalesce(install_metrics.install_events, 0) as install_events,\n        coalesce(install_metrics.uninstall_events, 0) as uninstall_events,\n        coalesce(install_metrics.update_events, 0) as update_events,    \n\n        -- all of the following fields (except average_rating) are rolling metrics that we'll use window functions to backfill instead of coalescing\n        install_metrics.total_device_installs,\n        install_metrics.total_device_uninstalls,\n        ratings.average_rating, -- this one actually isn't rolling but we won't coalesce days with no reviews to 0 rating. todo: move\n        ratings.rolling_total_average_rating,\n        store_performance.total_store_acquisitions,\n        store_performance.total_store_visitors\n    from install_metrics\n    full outer join ratings\n        on install_metrics.date_day = ratings.date_day\n        and install_metrics.source_relation = ratings.source_relation\n        and install_metrics.package_name = ratings.package_name\n    full outer join store_performance\n        on store_performance.date_day = coalesce(install_metrics.date_day, ratings.date_day)\n        and store_performance.source_relation = coalesce(install_metrics.source_relation, ratings.source_relation)\n        and store_performance.package_name = coalesce(install_metrics.package_name, ratings.package_name)\n    full outer join crashes\n        on coalesce(install_metrics.date_day, ratings.date_day, store_performance.date_day) = crashes.date_day\n        and coalesce(install_metrics.source_relation, ratings.source_relation, store_performance.source_relation) = crashes.source_relation\n        and coalesce(install_metrics.package_name, ratings.package_name, store_performance.package_name) = crashes.package_name\n),\n\n-- to backfill in days with NULL values for rolling metrics, we'll create partitions to batch them together with records that have non-null values\n-- we can't just use last_value(ignore nulls) because of postgres :/\ncreate_partitions as (\n\n    select\n        *, sum(case when rolling_total_average_rating is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as rolling_total_average_rating_partition, sum(case when total_device_installs is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_device_installs_partition, sum(case when total_device_uninstalls is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_device_uninstalls_partition, sum(case when total_store_acquisitions is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_store_acquisitions_partition, sum(case when total_store_visitors is null \n                then 0 else 1 end) over (partition by source_relation, package_name order by date_day asc rows unbounded preceding) as total_store_visitors_partition\n    from overview_join\n), \n\n-- now we'll take the non-null value for each partitioned batch and propagate it across the rows included in the batch\nfill_values as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        active_devices_last_30_days,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        average_rating\n\n        , first_value( rolling_total_average_rating ) over (\n            partition by source_relation, rolling_total_average_rating_partition, package_name order by date_day asc rows between unbounded preceding and current row) as rolling_total_average_rating, first_value( total_device_installs ) over (\n            partition by source_relation, total_device_installs_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_installs, first_value( total_device_uninstalls ) over (\n            partition by source_relation, total_device_uninstalls_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_device_uninstalls, first_value( total_store_acquisitions ) over (\n            partition by source_relation, total_store_acquisitions_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_acquisitions, first_value( total_store_visitors ) over (\n            partition by source_relation, total_store_visitors_partition, package_name order by date_day asc rows between unbounded preceding and current row) as total_store_visitors\n    from create_partitions\n), \n\nfinal as (\n\n    select \n        source_relation,\n        date_day,\n        package_name,\n        device_installs,\n        device_uninstalls,\n        device_upgrades,\n        user_installs,\n        user_uninstalls,\n        crashes,\n        anrs,\n        install_events,\n        uninstall_events,\n        update_events,\n        store_listing_acquisitions,\n        store_listing_visitors,\n        store_listing_conversion_rate,\n        active_devices_last_30_days,\n        average_rating,\n\n        -- leave null if there are no ratings yet\n        rolling_total_average_rating, \n\n        -- the first day will have NULL values, let's make it 0\n        coalesce(total_device_installs, 0) as total_device_installs,\n        coalesce(total_device_uninstalls, 0) as total_device_uninstalls,\n        coalesce(total_store_acquisitions, 0) as total_store_acquisitions,\n        coalesce(total_store_visitors, 0) as total_store_visitors,\n\n        -- calculate percentage and difference rolling metrics\n        round( cast(total_store_acquisitions as numeric(28,6)) / nullif(total_store_visitors, 0), 4) as rolling_store_conversion_rate,\n        coalesce(total_device_installs, 0) - coalesce(total_device_uninstalls, 0) as net_device_installs\n    from fill_values\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zz_google_play_google_play_dev\".\"google_play__overview_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-17T23:35:22.597381Z", "completed_at": "2024-07-17T23:35:22.600393Z"}, {"name": "execute", "started_at": "2024-07-17T23:35:22.600625Z", "completed_at": "2024-07-17T23:35:22.600629Z"}], "thread_id": "Thread-6", "execution_time": 0.0037279129028320312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.google_play.dbt_utils_unique_combination_of_columns_google_play__overview_report_source_relation__package_name__date_day.00e17d5062", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        source_relation, package_name, date_day\n    from \"postgres\".\"zz_google_play_google_play_dev\".\"google_play__overview_report\"\n    group by source_relation, package_name, date_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 4.232997179031372, "args": {"quiet": false, "printer_width": 80, "populate_cache": true, "strict_mode": false, "require_resource_names_without_spaces": false, "compile": true, "empty_catalog": false, "defer": false, "log_file_max_bytes": 10485760, "log_level": "info", "partial_parse_file_diff": true, "use_colors_file": true, "favor_state": false, "project_dir": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests", "select": [], "print": true, "send_anonymous_usage_stats": true, "vars": {}, "exclude": [], "cache_selected_only": false, "introspect": true, "macro_debugging": false, "log_level_file": "debug", "use_colors": true, "log_path": "/Users/catherinefritz/Documents/dbt_packages/google_play/dbt_google_play/integration_tests/logs", "warn_error_options": {"include": [], "exclude": []}, "log_format_file": "debug", "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "indirect_selection": "eager", "static": false, "enable_legacy_logger": false, "version_check": true, "partial_parse": true, "invocation_command": "dbt docs generate", "static_parser": true, "profiles_dir": "/Users/catherinefritz/.dbt", "show_resource_report": false, "which": "generate", "log_format": "default", "source_freshness_run_project_hooks": false}}